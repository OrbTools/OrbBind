// Code generated by "stringer --type Code"; DO NOT EDIT.

package keys

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CodeNone-0]
	_ = x[CodeESC-1]
	_ = x[Code1-2]
	_ = x[Code2-3]
	_ = x[Code3-4]
	_ = x[Code4-5]
	_ = x[Code5-6]
	_ = x[Code6-7]
	_ = x[Code7-8]
	_ = x[Code8-9]
	_ = x[Code9-10]
	_ = x[Code0-11]
	_ = x[CodeMinus-12]
	_ = x[CodeEqual-13]
	_ = x[CodeBackspace-14]
	_ = x[CodeTab-15]
	_ = x[CodeQ-16]
	_ = x[CodeW-17]
	_ = x[CodeE-18]
	_ = x[CodeR-19]
	_ = x[CodeT-20]
	_ = x[CodeY-21]
	_ = x[CodeU-22]
	_ = x[CodeI-23]
	_ = x[CodeO-24]
	_ = x[CodeP-25]
	_ = x[CodeLeftBrack-26]
	_ = x[CodeRightBrace-27]
	_ = x[CodeEnter-28]
	_ = x[CodeLeftCntl-29]
	_ = x[CodeA-30]
	_ = x[CodeS-31]
	_ = x[CodeD-32]
	_ = x[CodeF-33]
	_ = x[CodeG-34]
	_ = x[CodeH-35]
	_ = x[CodeJ-36]
	_ = x[CodeK-37]
	_ = x[CodeL-38]
	_ = x[CodeSemicolon-39]
	_ = x[CodeApostrophe-40]
	_ = x[CodeGrave-41]
	_ = x[CodeLeftShift-42]
	_ = x[CodeBackslash-43]
	_ = x[CodeZ-44]
	_ = x[CodeX-45]
	_ = x[CodeC-46]
	_ = x[CodeV-47]
	_ = x[CodeB-48]
	_ = x[CodeN-49]
	_ = x[CodeM-50]
	_ = x[CodeComma-51]
	_ = x[CodeDot-52]
	_ = x[CodeSlash-53]
	_ = x[CodeRightShift-54]
	_ = x[CodeKPAsterisk-55]
	_ = x[CodeLeftAlt-56]
	_ = x[CodeSpace-57]
	_ = x[CodeCapsLock-58]
	_ = x[CodeF1-59]
	_ = x[CodeF2-60]
	_ = x[CodeF3-61]
	_ = x[CodeF4-62]
	_ = x[CodeF5-63]
	_ = x[CodeF6-64]
	_ = x[CodeF7-65]
	_ = x[CodeF8-66]
	_ = x[CodeF9-67]
	_ = x[CodeF10-68]
	_ = x[CodeNumlock-69]
	_ = x[CodeScrollLock-70]
	_ = x[CodeKP7-71]
	_ = x[CodeKP8-72]
	_ = x[CodeKP9-73]
	_ = x[CodeKPMinus-74]
	_ = x[CodeKP4-75]
	_ = x[CodeKP5-76]
	_ = x[CodeKP6-77]
	_ = x[CodeKPPlus-78]
	_ = x[CodeKP1-79]
	_ = x[CodeKP2-80]
	_ = x[CodeKP3-81]
	_ = x[CodeKP0-82]
	_ = x[CodeKPDot-83]
	_ = x[CodeF11-87]
	_ = x[CodeF12-88]
	_ = x[CodeKPEnter-96]
	_ = x[CodeRightControl-97]
	_ = x[CodeKPSlash-98]
	_ = x[CodeRightAlt-100]
	_ = x[CodeHome-102]
	_ = x[CodeUpArrow-103]
	_ = x[CodePageUp-104]
	_ = x[CodeLeftArrow-105]
	_ = x[CodeRightArrow-106]
	_ = x[CodeEnd-107]
	_ = x[CodeDownArrow-108]
	_ = x[CodePageDown-109]
	_ = x[CodeInsert-110]
	_ = x[CodeDelete-111]
}

const (
	_Code_name_0 = "CodeNoneCodeESCCode1Code2Code3Code4Code5Code6Code7Code8Code9Code0CodeMinusCodeEqualCodeBackspaceCodeTabCodeQCodeWCodeECodeRCodeTCodeYCodeUCodeICodeOCodePCodeLeftBrackCodeRightBraceCodeEnterCodeLeftCntlCodeACodeSCodeDCodeFCodeGCodeHCodeJCodeKCodeLCodeSemicolonCodeApostropheCodeGraveCodeLeftShiftCodeBackslashCodeZCodeXCodeCCodeVCodeBCodeNCodeMCodeCommaCodeDotCodeSlashCodeRightShiftCodeKPAsteriskCodeLeftAltCodeSpaceCodeCapsLockCodeF1CodeF2CodeF3CodeF4CodeF5CodeF6CodeF7CodeF8CodeF9CodeF10CodeNumlockCodeScrollLockCodeKP7CodeKP8CodeKP9CodeKPMinusCodeKP4CodeKP5CodeKP6CodeKPPlusCodeKP1CodeKP2CodeKP3CodeKP0CodeKPDot"
	_Code_name_1 = "CodeF11CodeF12"
	_Code_name_2 = "CodeKPEnterCodeRightControlCodeKPSlash"
	_Code_name_3 = "CodeRightAlt"
	_Code_name_4 = "CodeHomeCodeUpArrowCodePageUpCodeLeftArrowCodeRightArrowCodeEndCodeDownArrowCodePageDownCodeInsertCodeDelete"
)

var (
	_Code_index_0 = [...]uint16{0, 8, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 74, 83, 96, 103, 108, 113, 118, 123, 128, 133, 138, 143, 148, 153, 166, 180, 189, 201, 206, 211, 216, 221, 226, 231, 236, 241, 246, 259, 273, 282, 295, 308, 313, 318, 323, 328, 333, 338, 343, 352, 359, 368, 382, 396, 407, 416, 428, 434, 440, 446, 452, 458, 464, 470, 476, 482, 489, 500, 514, 521, 528, 535, 546, 553, 560, 567, 577, 584, 591, 598, 605, 614}
	_Code_index_1 = [...]uint8{0, 7, 14}
	_Code_index_2 = [...]uint8{0, 11, 27, 38}
	_Code_index_4 = [...]uint8{0, 8, 19, 29, 42, 56, 63, 76, 88, 98, 108}
)

func (i Code) String() string {
	switch {
	case i <= 83:
		return _Code_name_0[_Code_index_0[i]:_Code_index_0[i+1]]
	case 87 <= i && i <= 88:
		i -= 87
		return _Code_name_1[_Code_index_1[i]:_Code_index_1[i+1]]
	case 96 <= i && i <= 98:
		i -= 96
		return _Code_name_2[_Code_index_2[i]:_Code_index_2[i+1]]
	case i == 100:
		return _Code_name_3
	case 102 <= i && i <= 111:
		i -= 102
		return _Code_name_4[_Code_index_4[i]:_Code_index_4[i+1]]
	default:
		return "Code(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
